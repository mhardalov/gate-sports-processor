Phase: Location
Input: Token Entity Location Person WinnerRelation
Options: control = appelt

Rule: SetOfEntitiesAnnotation
(
	(
		(
	 		(
				{Person, !Location}|
				{Entity, !Location}
			)
		)
		({Location} | {Person} | {Entity})*
	):entity
	(
		({Token.string == "("})[1]
		(({Entity} | {Location})+):location
		({Token.string == ")"})[1]
	)*
):match
-->
{
	gate.AnnotationSet match = (gate.AnnotationSet)bindings.get("match");

	String annotationType;
	gate.FeatureMap features = Factory.newFeatureMap();
	
	gate.AnnotationSet location = (gate.AnnotationSet)bindings.get("location");
	gate.Annotation locAnn = null;
	if (location != null && location.size() > 0) {
		locAnn = (gate.Annotation)location.iterator().next();
	}
	
	gate.AnnotationSet entity = (gate.AnnotationSet)bindings.get("entity");

	HashSet fNames = new HashSet();
	fNames.add("gender");
	gate.AnnotationSet persons = entity.get("Person", fNames);

	if(persons != null && persons.size() > 0) {
		annotationType = "person";
	} else {
		annotationType = "team";
	}

	features.put("rule","SetOfEntitiesAnnotation");
	features.put("type", annotationType);
	if (locAnn != null) {
		String locStr = doc.getContent().toString().substring(
			locAnn.getStartNode().getOffset().intValue(),
			locAnn.getEndNode().getOffset().intValue());

		features.put("location", locStr);
	}
	outputAS.add(match.firstNode(), match.lastNode(), "NEAnnotations", features);
}

Rule: LocationAsTeam
(
	({WinnerRelation})
	({Location}):match
)
-->
:match.NEAnnotations = {rule= "LocationAsTeam" }
